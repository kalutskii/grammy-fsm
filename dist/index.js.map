{"version":3,"sources":["../src/session/fsm.ts","../src/guards/when-state.ts","../src/guards/in-state.ts","../src/session/fsm-keys.ts"],"sourcesContent":["import type { Context, MiddlewareFn } from 'grammy';\nimport { MemorySessionStorage, type SessionFlavor, type StorageAdapter, session } from 'grammy';\n\n// State value, example: \"auth:await_phone\"\nexport type StateValue = string;\nexport type StateData = Record<string, unknown> | undefined;\n\n// Record of FSM state\nexport interface FSMRecord {\n  value: StateValue;\n  data?: StateData;\n}\n\n// FSM controls interface\nexport interface FSMControls {\n  readonly state: FSMRecord | null;\n  set(value: StateValue, data?: StateData): Promise<void>;\n  patch(data: Record<string, unknown>): Promise<void>;\n  clear(): Promise<void>;\n  is(...values: StateValue[]): boolean;\n}\n\n// Context with FSM controls\nexport type FSMFlavor<C extends Context = Context> = C & { fsm: FSMControls };\n\n// GrammY-session envelope\nexport type FSMSessionEnvelope<U extends Record<string, unknown> = {}> = U & {\n  _fsm: FSMRecord | null;\n};\n\n// GrammY awaits context WITHOUT session: Omit<C, \"session\">\nexport type SessionKeyFn<C extends Context = Context> = (ctx: Omit<C, 'session'>) => string | undefined | Promise<string | undefined>;\n\n// Create FSM session options\nexport interface CreateFSMSessionOptions<C extends Context, U extends Record<string, unknown> = {}> {\n  getSessionKey?: SessionKeyFn<C>;\n  storage?: StorageAdapter<FSMSessionEnvelope<U>>;\n  initialUserData?: () => U;\n}\n\nexport function createFSMSession<C extends Context = Context, U extends Record<string, unknown> = {}>(\n  opts: CreateFSMSessionOptions<C, U> = {}\n): [MiddlewareFn<C & SessionFlavor<FSMSessionEnvelope<U>>>, MiddlewareFn<FSMFlavor<C & SessionFlavor<FSMSessionEnvelope<U>>>>] {\n  // Either provided storage or a new default memory storage\n  const storage = opts.storage ?? new MemorySessionStorage<FSMSessionEnvelope<U>>();\n\n  const initial = (): FSMSessionEnvelope<U> => ({\n    _fsm: null,\n    ...(opts.initialUserData ? opts.initialUserData() : ({} as U)),\n  });\n\n  // GrammY session middleware\n  const sessionOptions: Record<string, unknown> = {\n    initial,\n    storage,\n  };\n\n  if (opts.getSessionKey) {\n    (sessionOptions as any).getSessionKey = opts.getSessionKey;\n  }\n  const sessionMw = session<FSMSessionEnvelope<U>, C>(sessionOptions as any);\n\n  const fsmMw: MiddlewareFn<FSMFlavor<C & SessionFlavor<FSMSessionEnvelope<U>>>> = async (ctx, next) => {\n    let current: FSMRecord | null = ctx.session._fsm ?? null;\n\n    const controls: FSMControls = {\n      get state() {\n        return current;\n      },\n      async set(value, data) {\n        current = { value, ...(data ? { data } : {}) };\n        ctx.session._fsm = current;\n      },\n      async patch(data) {\n        if (!current) current = { value: '', data: {} };\n        current.data = { ...(current.data ?? {}), ...data };\n        ctx.session._fsm = current;\n      },\n      async clear() {\n        current = null;\n        ctx.session._fsm = null;\n      },\n      is(...values) {\n        return !!current && values.includes(current.value);\n      },\n    };\n\n    (ctx as any).fsm = controls;\n    await next();\n  };\n\n  return [sessionMw, fsmMw];\n}\n","import type { MiddlewareFn } from 'grammy';\n\nimport type { FSMFlavor, StateValue } from '../session/fsm';\n\nexport function whenState<C extends FSMFlavor>(values: StateValue[] | StateValue, handler: MiddlewareFn<C>): MiddlewareFn<C> {\n  // Filters handler execution based on FSM state\n\n  const list = Array.isArray(values) ? values : [values];\n\n  return async (ctx, next) => {\n    if (ctx.fsm?.is(...list)) return handler(ctx, next);\n    return next();\n  };\n}\n","import type { FSMFlavor, StateValue } from '../session/fsm';\n\nexport function inState<C extends FSMFlavor>(...values: StateValue[]) {\n  // Predicate for checking FSM state\n\n  return (ctx: C) => ctx.fsm?.is(...values) ?? false;\n}\n","import type { Context } from 'grammy';\n\nimport type { SessionKeyFn } from './fsm';\n\n// Keys by chat.id\nexport const chatSessionKey: SessionKeyFn = <C extends Context>(ctx: C) => (ctx.chat?.id ? `chat:${ctx.chat.id}` : undefined);\n\n// Keys by user.id (in any chat)\nexport const userSessionKey: SessionKeyFn = <C extends Context>(ctx: C) => (ctx.from?.id ? `user:${ctx.from.id}` : undefined);\n\n// Keys by chat.id and user.id (useful for groups)\nexport const chatUserSessionKey: SessionKeyFn = <C extends Context>(ctx: C) =>\n  ctx.chat?.id && ctx.from?.id ? `chat:${ctx.chat.id}:user:${ctx.from.id}` : undefined;\n\nexport type { SessionKeyFn };\n"],"mappings":";AACA,SAAS,sBAA+D,eAAe;AAuChF,SAAS,iBACd,OAAsC,CAAC,GACsF;AAE7H,QAAM,UAAU,KAAK,WAAW,IAAI,qBAA4C;AAEhF,QAAM,UAAU,OAA8B;AAAA,IAC5C,MAAM;AAAA,IACN,GAAI,KAAK,kBAAkB,KAAK,gBAAgB,IAAK,CAAC;AAAA,EACxD;AAGA,QAAM,iBAA0C;AAAA,IAC9C;AAAA,IACA;AAAA,EACF;AAEA,MAAI,KAAK,eAAe;AACtB,IAAC,eAAuB,gBAAgB,KAAK;AAAA,EAC/C;AACA,QAAM,YAAY,QAAkC,cAAqB;AAEzE,QAAM,QAA2E,OAAO,KAAK,SAAS;AACpG,QAAI,UAA4B,IAAI,QAAQ,QAAQ;AAEpD,UAAM,WAAwB;AAAA,MAC5B,IAAI,QAAQ;AACV,eAAO;AAAA,MACT;AAAA,MACA,MAAM,IAAI,OAAO,MAAM;AACrB,kBAAU,EAAE,OAAO,GAAI,OAAO,EAAE,KAAK,IAAI,CAAC,EAAG;AAC7C,YAAI,QAAQ,OAAO;AAAA,MACrB;AAAA,MACA,MAAM,MAAM,MAAM;AAChB,YAAI,CAAC,QAAS,WAAU,EAAE,OAAO,IAAI,MAAM,CAAC,EAAE;AAC9C,gBAAQ,OAAO,EAAE,GAAI,QAAQ,QAAQ,CAAC,GAAI,GAAG,KAAK;AAClD,YAAI,QAAQ,OAAO;AAAA,MACrB;AAAA,MACA,MAAM,QAAQ;AACZ,kBAAU;AACV,YAAI,QAAQ,OAAO;AAAA,MACrB;AAAA,MACA,MAAM,QAAQ;AACZ,eAAO,CAAC,CAAC,WAAW,OAAO,SAAS,QAAQ,KAAK;AAAA,MACnD;AAAA,IACF;AAEA,IAAC,IAAY,MAAM;AACnB,UAAM,KAAK;AAAA,EACb;AAEA,SAAO,CAAC,WAAW,KAAK;AAC1B;;;ACxFO,SAAS,UAA+B,QAAmC,SAA2C;AAG3H,QAAM,OAAO,MAAM,QAAQ,MAAM,IAAI,SAAS,CAAC,MAAM;AAErD,SAAO,OAAO,KAAK,SAAS;AAC1B,QAAI,IAAI,KAAK,GAAG,GAAG,IAAI,EAAG,QAAO,QAAQ,KAAK,IAAI;AAClD,WAAO,KAAK;AAAA,EACd;AACF;;;ACXO,SAAS,WAAgC,QAAsB;AAGpE,SAAO,CAAC,QAAW,IAAI,KAAK,GAAG,GAAG,MAAM,KAAK;AAC/C;;;ACDO,IAAM,iBAA+B,CAAoB,QAAY,IAAI,MAAM,KAAK,QAAQ,IAAI,KAAK,EAAE,KAAK;AAG5G,IAAM,iBAA+B,CAAoB,QAAY,IAAI,MAAM,KAAK,QAAQ,IAAI,KAAK,EAAE,KAAK;AAG5G,IAAM,qBAAmC,CAAoB,QAClE,IAAI,MAAM,MAAM,IAAI,MAAM,KAAK,QAAQ,IAAI,KAAK,EAAE,SAAS,IAAI,KAAK,EAAE,KAAK;","names":[]}